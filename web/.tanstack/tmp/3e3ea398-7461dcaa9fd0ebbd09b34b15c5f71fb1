/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as protectedRoutesRouteRouteImport } from './routes/(protectedRoutes)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as protectedRoutesDashboardIndexRouteImport } from './routes/(protectedRoutes)/dashboard/index'
import { Route as authSignupIndexRouteImport } from './routes/(auth)/signup/index'
import { Route as authSigninIndexRouteImport } from './routes/(auth)/signin/index'

const protectedRoutesRouteRoute = protectedRoutesRouteRouteImport.update({
  id: '/(protectedRoutes)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedRoutesDashboardIndexRoute =
  protectedRoutesDashboardIndexRouteImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => protectedRoutesRouteRoute,
  } as any)
const authSignupIndexRoute = authSignupIndexRouteImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => authRouteRoute,
} as any)
const authSigninIndexRoute = authSigninIndexRouteImport.update({
  id: '/signin/',
  path: '/signin/',
  getParentRoute: () => authRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof protectedRoutesRouteRouteWithChildren
  '/signin': typeof authSigninIndexRoute
  '/signup': typeof authSignupIndexRoute
  '/dashboard': typeof protectedRoutesDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof protectedRoutesRouteRouteWithChildren
  '/signin': typeof authSigninIndexRoute
  '/signup': typeof authSignupIndexRoute
  '/dashboard': typeof protectedRoutesDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(protectedRoutes)': typeof protectedRoutesRouteRouteWithChildren
  '/(auth)/signin/': typeof authSigninIndexRoute
  '/(auth)/signup/': typeof authSignupIndexRoute
  '/(protectedRoutes)/dashboard/': typeof protectedRoutesDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/signin' | '/signup' | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/signin' | '/signup' | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(protectedRoutes)'
    | '/(auth)/signin/'
    | '/(auth)/signup/'
    | '/(protectedRoutes)/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  protectedRoutesRouteRoute: typeof protectedRoutesRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protectedRoutes)': {
      id: '/(protectedRoutes)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRoutesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protectedRoutes)/dashboard/': {
      id: '/(protectedRoutes)/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof protectedRoutesDashboardIndexRouteImport
      parentRoute: typeof protectedRoutesRouteRoute
    }
    '/(auth)/signup/': {
      id: '/(auth)/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/signin/': {
      id: '/(auth)/signin/'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof authSigninIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authSigninIndexRoute: typeof authSigninIndexRoute
  authSignupIndexRoute: typeof authSignupIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authSigninIndexRoute: authSigninIndexRoute,
  authSignupIndexRoute: authSignupIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface protectedRoutesRouteRouteChildren {
  protectedRoutesDashboardIndexRoute: typeof protectedRoutesDashboardIndexRoute
}

const protectedRoutesRouteRouteChildren: protectedRoutesRouteRouteChildren = {
  protectedRoutesDashboardIndexRoute: protectedRoutesDashboardIndexRoute,
}

const protectedRoutesRouteRouteWithChildren =
  protectedRoutesRouteRoute._addFileChildren(protectedRoutesRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  protectedRoutesRouteRoute: protectedRoutesRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
